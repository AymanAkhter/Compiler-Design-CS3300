//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
// import util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */


public class SecondPass<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public int error=0;
   public boolean cycle;
   public Map<String, Boolean> vis = new HashMap<String, Boolean>();
   public Map<String, Integer> start = new HashMap<String, Integer>();
   public Map<String, Integer> end = new HashMap<String, Integer>();
   public int clk = 0;
   public Map<String, Class> map;
   public String currentClass;
   public String currentMethod;
   public boolean inMethod;
   public boolean inClass;
   public boolean debug = false;
   public ArrayList<String> curExpList = new ArrayList<String>();

   public Class findClass(String className)
   {
      for (Map.Entry<String, Class> entry : map.entrySet())
      {
         if(className==entry.getKey())
         {
            return map.get(className);
         }
      }
      Class retClass = new Class();
      retClass.name = "$";
      return retClass; 
   }

   public void checkAllTypesExist()
   {
      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            Class value = entry.getValue();

            // System.out.println("Key: " + key);
            // System.out.println("Value (Class name): " + value.name);
            // System.out.println("Value (Parent class): " + value.parent);
            if(value.parent!="~")
            {
               if(findClass(value.parent).name=="$")
               {
                  System.out.println("Symbol not found"); System.exit(0);
               }
            }

            // Iterate through MethodList
            // System.out.println("Methods:");
            for (Method method : value.MethodList) {
               //  System.out.println("  Method Name: " + method.name);
               //  System.out.println("  Arguments:");
                for (Var argument : method.arguments) {
                  //   System.out.println("    Argument Name: " + argument.name);
                  //   System.out.println("    Argument Type: " + argument.type);
                  if(argument.type!="int" && argument.type!="int[]" && argument.type!="boolean" && findClass(argument.type).name=="$")
                  {
                     System.out.println("Symbol not found"); System.exit(0);
                  }
                }
               //  System.out.println("  Variables:");
                for (Var variable : method.variables) {
                  //   System.out.println("    Variable Name: " + variable.name);
                  //   System.out.println("    Variable Type: " + variable.type);
                  if(variable.type!="int" && variable.type!="int[]" && variable.type!="boolean" && findClass(variable.type).name=="$")
                  {
                     System.out.println("Symbol not found"); System.exit(0);
                  }
                }
               //  System.out.println("  Return Type: " + method.returnType);
               if(method.returnType!="int" && method.returnType!="int[]" && method.returnType!="boolean" && findClass(method.returnType).name=="$")
               {
                  System.out.println("Symbol not found"); System.exit(0);
               }
            }

            // Iterate through FieldsList
            // System.out.println("Fields:");
            for (Var field : value.FieldsList) {
               //  System.out.println("  Field Name: " + field.name);
               //  System.out.println("  Field Type: " + field.type);
               if(field.type!="int" && field.type!="int[]" && field.type!="boolean" && findClass(field.type).name=="$")
                  {
                     System.out.println("Symbol not found"); System.exit(0);
                  }
            }
        }
   }

   public boolean checkMatchingType(String type1, String type2)
   {
      // System.out.println(type1 + " " + type2);
      if(type1.equals(type2)){
         return true;
      }
      if(type1.equals("int")){
         return (type2.equals("int"));
      }
      if(type1.equals("int[]")){
         return (type2.equals("int[]"));
      }
      if(type1.equals("boolean")){
         return (type2.equals("boolean"));
      }

      if(map.get(type2).parent.equals("~")){
         return false;
      }
      return checkMatchingType(type1, map.get(type2).parent);
   }

   public Method getMethod(String className, String methodName)
   {
      // System.out.println(className);
      // System.out.println(methodName);
      for(int i=0; i < map.get(className).MethodList.size(); i++)
      {
         if(methodName.equals(map.get(className).MethodList.get(i).name))
         {
            return map.get(className).MethodList.get(i);
         }
      }

      if(!(map.get(className).parent.equals("~")))
      {
         return getMethod(map.get(className).parent, methodName);
      }

      Method nullMethod = new Method();
      nullMethod.name="~";
      return nullMethod;
   }

   public Var getVarInClass(String className, String varName)
   {
      for(int i=0; i < map.get(className).FieldsList.size(); i++)
      {
         if(varName.equals(map.get(className).FieldsList.get(i).name))
         {
            return map.get(className).FieldsList.get(i);
         }
      }

      if(!(map.get(className).parent.equals("~")))
      {
         return getVarInClass(map.get(className).parent, varName);
      }

      Var nullVar = new Var("~","~");
      nullVar.name="~";
      return nullVar;
   }

   public Var getVarInMethod(String className, String methodName, String varName)
   {
      // System.out.println(className);
      // System.out.println(methodName);
      // System.out.println(inMethod);
      // System.out.println(varName);
      Method curMethod = getMethod(className, methodName);
      ArrayList<Var> temp = curMethod.arguments;
      if(curMethod.name.equals("~"))
      {
         System.out.println("Symbol not found"); if(debug) System.out.println("E1"); System.exit(1);
      }

      for(int i=0; i < curMethod.variables.size(); i++)
      {
         if(varName.equals(curMethod.variables.get(i).name))
         {
            return curMethod.variables.get(i);
         }
      }

      for(int i=0; i < curMethod.arguments.size(); i++)
      {
         if(varName.equals(curMethod.arguments.get(i).name))
         {
            return curMethod.arguments.get(i);
         }
      }
      // CHECK REP IN FORMAL PARAMS

      return getVarInClass(className, varName);

   }

   public boolean checkArgMatching(ArrayList<Var> args, ArrayList<String> types)
   {

      // System.out.println(args.size());
      // System.out.println(types.size());

      // for(int i=0; i<types.size(); i++)
      // {
      //    System.out.println(args.get(i).type + " " + types.get(i));
      //    // if(!checkMatchingType(args.get(i).type, types.get(i)))
      //    // {
      //    //    return false;
      //    // }
      // }

      if(args.size()!=types.size())
      {
         // System.out.println("L");
         return false;
      }
      for(int i=0; i<args.size(); i++)
      {
         // if(!(args.get(i).type.equals(types.get(i))))
         // {
         //    return false;
         // }
         if(!checkMatchingType(args.get(i).type, types.get(i)))
         {
            return false;
         }
      }
      return true;

   }

   // public int findMethodIndex(String className, String methodName)
   // {
   //    for(int i=0; i < map.get(className).MethodList.size(); i++)
   //    {
   //       if(methodName==map.get(className).MethodList.get(i).name)
   //       {
   //          return i;
   //       }
   //    }
   //    return -1;
   // }

   public void printData(){

      // System.out.println("Hi");
      // System.out.flush();

      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            Class value = entry.getValue();

            System.out.println("Key: " + key);
            System.out.println("Value (Class name): " + value.name);
            System.out.println("Value (Parent class): " + value.parent);

            // Iterate through MethodList
            System.out.println("Methods:");
            for (Method method : value.MethodList) {
                System.out.println("  Method Name: " + method.name);
                System.out.println("  Arguments:");
                for (Var argument : method.arguments) {
                    System.out.println("    Argument Name: " + argument.name);
                    System.out.println("    Argument Type: " + argument.type);
                }
                System.out.println("  Variables:");
                for (Var variable : method.variables) {
                    System.out.println("    Variable Name: " + variable.name);
                    System.out.println("    Variable Type: " + variable.type);
                }
                System.out.println("  Return Type: " + method.returnType);
            }

            // Iterate through FieldsList
            System.out.println("Fields:");
            for (Var field : value.FieldsList) {
                System.out.println("  Field Name: " + field.name);
                System.out.println("  Field Type: " + field.type);
            }
        }

   }

   // public SecondPass(Map<String, Class> passedMap){
   //    map = passedMap;
   // }

   public boolean checkSignature(Method method1, Method method2){
      if(!(method1.name.equals(method2.name)))
         return false;
      // System.out.println("One");
      if(!(checkMatchingType(method2.returnType,method1.returnType)))
         return false;
      // System.out.println("Two");
      if(method1.arguments.size()!=method2.arguments.size())
         return false;
         // System.out.println("Three");
      for(int i=0; i<method1.arguments.size(); i++){
         if(!(method1.arguments.get(i).type.equals(method2.arguments.get(i).type)))
            return false;
      }
      return true;
   }

   public void checkInheritance(String className, Method checkMethod){

      if(className.equals("~")){
         return;
      }
      for(Method itr : map.get(className).MethodList){
         if(itr.name.equals(checkMethod.name) && !checkSignature(checkMethod,itr)){
            // if(!checkSignature(checkMethod,itr))
            // {
            //    System.out.println("Here");
            // }
               System.out.println("Type error"); if(debug) System.out.println("E2"); System.exit(1);
               return;
            }
         }
      checkInheritance(map.get(className).parent, checkMethod);
      //start call with parent as first argument not same class
   }

   public void checkAllInheritance(){
      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            Class value = entry.getValue();

            // Iterate through MethodList
            for (Method method : value.MethodList) {
               //  System.out.println(value.name);
               //  System.out.println(value.parent);
                checkInheritance(value.parent,method);
            }
        }
   }

   public boolean checkIfClassExists(String name){
      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            if(key.equals(name))
            {
               return true;
            }
        }
         return false;
   }

   public void checkAllParentsExist(){
      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            Class value = entry.getValue();

            checkIfClassExists(value.parent);
        }
   }

   public boolean checkCycle(){

      cycle=false;
      for (Map.Entry<String, Class> entry : map.entrySet()) {
            vis.put(entry.getKey(),false);
            start.put(entry.getKey(),-1);
            end.put(entry.getKey(),-1);
        }
      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            if(!vis.get(key)){
                dfs(key);
            }
        }
        return cycle;
   }

   public void dfs(String cur){
        vis.put(cur,true);
        start.put(cur,clk++);
        String par = map.get(cur).parent;
        if(map.containsKey(par))
        {
            if(start.get(par)!=-1 && end.get(par)==-1)
            {
                // System.out.println(cur + " " + par);
               //  cycle = true;
               //  return;
               System.out.println("Type error"); if(debug) System.out.println("ECycle"); System.exit(0);
            }
            dfs(par);
        }
        end.put(cur,clk++);
    }

   // public String getIDType()

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      
      R _ret = null; 
      map = (Map<String,Class>)argu;
      argu=(A)"";
      // printData();
      checkAllTypesExist();
      checkCycle();
      checkAllInheritance();
      // checkAllParentsExist();
      
      n.f0.accept(this, argu);
      // System.out.println("lmao");
      n.f1.accept(this, argu);
      // System.out.println("lmao");
      n.f2.accept(this, argu);
      // System.out.println("lmao");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      // System.out.println("Here22");
      n.f0.accept(this, argu);
      // n.f1.accept(this, argu);
      currentClass = (String)(n.f1.accept(this, argu));
      // System.out.println(currentClass);
      // inClass = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      currentMethod = n.f6.toString();
      // System.out.println("Printing main...");
      // System.out.println(currentMethod);
      // inMethod = true;
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      
      n.f12.accept(this, argu);
      // System.out.println("ID done");

      n.f13.accept(this, argu);
      // System.out.println("Here0");
      n.f14.accept(this, argu);
      
      n.f15.accept(this, argu);
      // inMethod = false;
      n.f16.accept(this, argu);
      // System.out.println("Main class done");
      // inClass = false;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      // System.out.println("InClassDec");
      n.f0.accept(this, argu);
      inMethod = false;
      currentClass = (String)(n.f1.accept(this, argu));
      inMethod = true;
      inClass = true;
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      // System.out.println("Here");
      n.f4.accept(this, argu);
      
      n.f5.accept(this, argu);
      inClass = false;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      inMethod = false;
      currentClass = (String)(n.f1.accept(this, argu));
      inClass = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      inMethod = true;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      inClass = false;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      inMethod = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      inMethod = true;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      inMethod = false;
      // System.out.println("InMethod");
      n.f0.accept(this, argu);
      String type1 = (String)(n.f1.accept(this, argu));
      // System.out.println(type1);
      currentMethod = (String)(n.f2.accept(this, argu));
      // System.out.println("checking methodname");
      // System.out.println(currentMethod);
      inMethod = true;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      // System.out.println("Formal parameters done");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      // System.out.println("DecDone");
      n.f9.accept(this, argu);
      String type2 = (String)(n.f10.accept(this, argu));
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      if(!checkMatchingType(type1, type2))
      {
         System.out.println("Type error"); if(debug) System.out.println("E3"); System.exit(1);
      }
      inMethod = false;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      inMethod = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      inMethod = true;
      // System.out.println("HI");
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
     
      R _ret = (R)(n.f0.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      // System.out.println("Reached");
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String type1 = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String type2 = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      // System.out.println("InAssgn");
      if(!checkMatchingType(type1,type2))
      {
         System.out.println("Type error"); if(debug) System.out.println("E4"); System.exit(1);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int[]")
      {
         System.out.println("Type error"); if(debug) System.out.println("E5"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E6"); System.exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if((String)(n.f5.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E7"); System.exit(1);
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String) n.f2.accept(this, argu);
      // System.out.println(type);
      if((String)(n.f2.accept(this, argu))!="boolean")
      {
         System.out.println("Type error"); if(debug) System.out.println("E8"); System.exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="boolean")
      {
         System.out.println("Type error");
         if(debug) System.out.println("E9"); System.exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="boolean")
      {
         System.out.println("Type error");
         if(debug) System.out.println("E10"); System.exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if((String)(n.f4.accept(this, argu))!="boolean")
      {
         System.out.println("Type error"); 
         if(debug) System.out.println("E11"); System.exit(1);
      }
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E12"); System.exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret = (R)(n.f0.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="boolean")
      {
         System.out.println("Type error"); if(debug) System.out.println("E13"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="boolean")
      {
         System.out.println("Type error"); if(debug) System.out.println("E14"); System.exit(1);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="boolean")
      {
         System.out.println("Type error"); if(debug) System.out.println("E15"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="boolean")
      {
         System.out.println("Type error"); if(debug) System.out.println("E16"); System.exit(1);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E17"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E18"); System.exit(1);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String type1 = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String type2 = (String)(n.f2.accept(this, argu));

      if(!(checkMatchingType(type1,type2) || checkMatchingType(type2,type1)))
      {
         System.out.println("Type error"); if(debug) System.out.println("E19"); System.exit(1);
      }

      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E21"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E22"); System.exit(1);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E23"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E24"); System.exit(1);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E25"); System.exit(1);
      }
      n.f1.accept(this, argu);
      
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E26"); System.exit(1);
      }
      
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E27"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E28"); System.exit(1);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if((String)(n.f0.accept(this, argu))!="int[]")
      {
         System.out.println("Type error"); if(debug) System.out.println("E29"); System.exit(1);
      }
      n.f1.accept(this, argu);
      if((String)(n.f2.accept(this, argu))!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E30"); System.exit(1);
      }
      n.f3.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String primType = (String)(n.f0.accept(this, argu));
      if(primType!="int[]")
      {
         System.out.println("Type error"); if(debug) System.out.println("E31"); System.exit(1);
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      // System.out.println("msg");
      String type = (String)(n.f0.accept(this, argu));
      // System.out.println(type);
      if(type.equals("int") || type.equals("int[]") || type.equals("boolean"))
      {
         System.out.println("Type error"); if(debug) System.out.println("E32"); System.exit(1);
      }
      n.f1.accept(this, argu);
      // check if f0 is in scope
      // String type = curVar.type;
      
      inMethod = false;
      String methodName = (String)(n.f2.accept(this, argu));
      inMethod = true;
      Method curMethod = getMethod(type, methodName);
      if(curMethod.name.equals("~"))
      {
         System.out.println("Symbol not found"); if(debug) System.out.println("E33"); System.exit(1);
      }
      

      n.f3.accept(this, argu);
      
      ArrayList<String> temp = new ArrayList<String>();
      // temp = curExpList;
      for(int i=0; i<curExpList.size(); i++)
      {
         temp.add(curExpList.get(i));
      }
      curExpList.clear();
      
      n.f4.accept(this, argu);
      // System.out.println(n.f4.node.size());
      // System.out.println(curExpList);
      // System.out.println(curMethod.arguments);
      if(!checkArgMatching(curMethod.arguments, curExpList))
      {
         // System.out.println("ArgError");
         System.out.println("Type error"); if(debug) System.out.println("E34"); System.exit(1);
      }
      

      _ret = (R)(curMethod.returnType);
      curExpList.clear();
      for(int i=0; i<temp.size(); i++)
      {
         curExpList.add(temp.get(i));
      }
      n.f5.accept(this, argu);
      // System.out.println("This");
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      curExpList.add((String)(n.f0.accept(this, argu)));
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      curExpList.add((String)(n.f1.accept(this, argu)));
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=(R)(n.f0.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
      String idName = n.f0.tokenImage;
      if(inClass == true && inMethod == true)
      {
         // System.out.println(idName);
         Var curVar = getVarInMethod(currentClass, currentMethod, idName);
         // System.out.println(currentClass);
         if(curVar.name.equals("~"))
         {
            System.out.println("Symbol not found"); if(debug) System.out.println("E35"); System.exit(1);
         }
         // System.out.println("Stored");
         return (R)(curVar.type);
         
      }
      // System.out.println("Here");
      // System.out.flush;
      return (R)idName;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      // System.out.println("Mul done");
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)currentClass;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R _ret = (R)(n.f3.accept(this, argu));
      if((String)_ret!="int")
      {
         System.out.println("Type error"); if(debug) System.out.println("E36"); System.exit(1);
      }
      n.f4.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      
      n.f0.accept(this, argu);
      inMethod=false;
      R _ret = (R)(n.f1.accept(this, argu));
      inMethod = true;
      n.f2.accept(this, argu);
      if(!checkIfClassExists((String)_ret))
      {
         System.out.println("Symbol not found"); if(debug) System.out.println("E37"); System.exit(1);
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      
      n.f0.accept(this, argu);
      R _ret = (R)(n.f1.accept(this, argu));
      if((String)_ret != "boolean")
      {
         System.out.println("Type error"); if(debug) System.out.println("E38"); System.exit(1);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      
      n.f0.accept(this, argu);
      R _ret = (R)(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
}
