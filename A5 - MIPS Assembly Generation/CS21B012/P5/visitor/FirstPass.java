//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FirstPass<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   boolean lblFlag = false;

   void printFinal()
   {
        System.out.println(".text");
        System.out.println(".globl _halloc\n");
        System.out.println("_halloc:");
        System.out.println("li $v0, 9");
        System.out.println("syscall");
        System.out.println("j $ra\n");
        System.out.println(".text");
        System.out.println(".globl _print");
        System.out.println("_print:");
        System.out.println("li $v0, 1");
        System.out.println("syscall");
        System.out.println("la $a0, newl");
        System.out.println("li $v0, 4");
        System.out.println("syscall");
        System.out.println("j $ra\n");
        System.out.println(".data");
        System.out.println(".align 0");
        System.out.println("newl:\t.asciiz \"\\n\"");
        System.out.println(".data");
        System.out.println(".align  0");
        System.out.println("str_er:  .asciiz \" ERROR: abnormal termination\\n\" ");
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println(".text");
      System.out.println(".globl main");
      System.out.println("main:");
      // STACK STUFF
      

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String numArgsName = (String)n.f2.accept(this, argu);
      Integer numArgs = Integer.valueOf(numArgsName);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String stackName = (String)n.f5.accept(this, argu);
      Integer stack = Integer.valueOf(stackName);
      System.out.println("sw $fp, 0($sp)");
      System.out.println("sw $ra, -4($sp)");
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, "+(4*stack+8));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      //STACK STUFF
      System.out.println("lw $ra, -4($fp)");
      System.out.println("lw $fp, 0($fp)");
      System.out.println("addu $sp, $sp, "+(4*stack+8));
      System.out.println("j $ra");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      printFinal();
    //   System.out.println();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      lblFlag=true;
      n.f0.accept(this, argu);
      lblFlag=false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
        R _ret=null;
        String name = (String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String numArgsName = (String)n.f2.accept(this, argu);
        Integer numArgs = Integer.valueOf(numArgsName);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String stackSizeName = (String)n.f5.accept(this, argu);
        Integer stackSize = Integer.valueOf(stackSizeName);

        System.out.println(".text");
        System.out.println(".globl " + name);
        System.out.println(name + ":");

        System.out.println("sw $fp, 0($sp)");
        System.out.println("sw $ra, -4($sp)");
        System.out.println("move $fp, $sp");
        System.out.println("subu $sp, $sp, "+(4*stackSize+8));

        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu); 
        n.f12.accept(this, argu);

        // STACK STUFF
        System.out.println("lw $ra, -4($fp)");
        System.out.println("lw $fp, 0($fp)");
        System.out.println("addu $sp, $sp, "+(4*stackSize+8));
        System.out.println("j $ra");

        return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      
      lblFlag = false;
      R _ret=null;
      n.f0.accept(this, argu);
      lblFlag = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("la $a0, str_er");
      System.out.println("syscall");
      System.out.println("li $v0, 10");
      System.out.println("syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String reg = (String)n.f1.accept(this, argu);
        String lblName = (String)n.f2.accept(this, argu);
        System.out.println("beqz " + reg + " " + lblName);
        return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String lblName = (String)n.f1.accept(this, argu);
        System.out.println("b " + lblName);
        return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String reg1 = (String)n.f1.accept(this, argu);
        String intName = (String)n.f2.accept(this, argu);
        String reg2 = (String)n.f3.accept(this, argu);

        System.out.println("sw " + reg2 + ", " + intName + "(" + reg1 + ")");

        return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String reg1 = (String)n.f1.accept(this, argu);
        String reg2 = (String)n.f2.accept(this, argu);
        String intName = (String)n.f3.accept(this, argu);

        System.out.println("lw " + reg1 + ", " + intName + "(" + reg2 + ")");

        return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String regName = (String)n.f1.accept(this, argu);
        String cur = (String)n.f2.accept(this, argu);
        String getCur = cur.substring(1);

        if(cur.charAt(0)=='R')
            System.out.println("move " + regName + ", " + getCur);
        else if(cur.charAt(0)=='I')
            System.out.println("li " + regName + ", " + getCur);
        else if(cur.charAt(0)=='L')
            System.out.println("la " + regName + ", " + getCur);


        return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String cur = (String)n.f1.accept(this, argu);
        String getCur = cur.substring(1);
        if(cur.charAt(0)=='R')
            System.out.println("move $a0, " + getCur);
        else if(cur.charAt(0)=='I')
            System.out.println("li $a0, " + getCur);
        else if(cur.charAt(0)=='L')
            System.out.println("la $a0, " + getCur);
        
        System.out.println("jal _print");

        return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String regName = (String)n.f1.accept(this, argu);
        String intName = (String)n.f2.accept(this, argu);
        Integer intVal = Integer.valueOf(intName);
        System.out.println("lw "+regName+", -"+(8+4*intVal)+"($fp)");
        return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String intName = (String)n.f1.accept(this, argu);
        Integer intVal = Integer.valueOf(intName);
        String regName = (String)n.f2.accept(this, argu);
        System.out.println("sw "+regName+", -"+(8+4*intVal)+"($fp)");
        return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String intName = (String)n.f1.accept(this, argu);
        Integer intVal = Integer.valueOf(intName);
        String regName = (String)n.f2.accept(this, argu);
        System.out.println("sw "+regName+", -"+(4+4*intVal)+"($sp)");
        return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String cur = (String)n.f1.accept(this, argu);
        String getCur = cur.substring(1);
        if(cur.charAt(0)=='R')
            System.out.println("move $v0, " + getCur);
        else if(cur.charAt(0)=='I')
            System.out.println("li $v0, " + getCur);
        else if(cur.charAt(0)=='L')
            System.out.println("la $v0, " + getCur);

        System.out.println("jalr $v0");
        return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      String res = (String)n.f0.accept(this, argu);

      return (R)res;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String sz = (String)n.f1.accept(this, argu);
      String getCur = sz.substring(1);
      if(sz.charAt(0)=='R')
            System.out.println("move $a0, " + getCur);
        else if(sz.charAt(0)=='I')
            System.out.println("li $a0, " + getCur);
        else if(sz.charAt(0)=='L')
            System.out.println("la $a0, " + getCur);
      System.out.println("jal _halloc");

      return (R)"R$v0";
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String operator = (String)n.f0.accept(this, argu);
      String operand1 = (String)n.f1.accept(this, argu);

      String operand2 = (String)n.f2.accept(this, argu);
      String opFin = operand2.substring(1);

      System.out.println(operator + " $v0, " + operand1 + ", " + opFin);

      return (R)"R$v0";
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      String opName = (String)n.f0.accept(this, argu);

      String op ="";
      if(opName == "LE") 
        op = "sle";
      else if(opName == "NE") 
        op = "sne";
      else if(opName == "PLUS") 
        op = "add";
      else if(opName == "MINUS") 
        op = "sub";
      else if(opName == "TIMES") 
        op = "mul";
      else if(opName == "DIV") 
        op = "div";

      return (R)op;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ret = (String)n.f1.accept(this, argu);
      return (R)ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      String name = (String)n.f0.accept(this, argu);
      String passed = "";
      if(n.f0.which==0)
        passed = "R" + name;
      else if(n.f0.which==1)
        passed = "I" + name;
      else if(n.f0.which==2)
        passed = "L" + name;
      return (R)passed;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
    //   n.f0.accept(this, argu);
      String val = (String)n.f0.accept(this,argu);
      val = "$" + val;
      return (R)val;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String name = n.f0.tokenImage;
    //   Integer intVal = Integer.parseInt(name);
      return (R)name;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String name = n.f0.tokenImage;
      if(lblFlag)
        System.out.println(name + ":");
      return (R)name;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
