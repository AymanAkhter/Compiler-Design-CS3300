//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

// public class Table{
//    ArrayList<String> MethodList;
// }



public class SecondPass<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public class ProcStruct{
      ArrayList<String> methods;
      ArrayList<String> fields;
   }
   public Map<String,Class> map;
   public int TMPcnt=0;
   public int LBLcnt=0;
   public String currentClass;
   public String currentMethod;
   public boolean inMethod;
   public boolean inClass;
   public HashMap<String,Integer> varMap = new HashMap<String,Integer>();
   public Map<String,ProcStruct> classStruct = new HashMap<String,ProcStruct>();
   public Stack<String> returnClasses = new Stack<String>();
   public ArrayList<Integer> curExpList = new ArrayList<Integer>();
   public HashMap<Integer,String> typeMap = new HashMap<Integer,String>();
   public HashMap<Integer,String> nameMap = new HashMap<Integer,String>();

   String getLastName(String fullName){
      for(int i=0; i<fullName.length(); i++){
         if(fullName.charAt(i)==' '){
            return fullName.substring(i+1);
         }
      }
      return "~~";
   }

   String getFirstName(String fullName){
      for(int i=0; i<fullName.length(); i++){
         if(fullName.charAt(i)==' '){
            return fullName.substring(0,i);
         }
      }
      return "~~";
   }

   int replaceMethodName(ArrayList<String> methodNames, String className, Method curMethod){
      for(int i=0; i<methodNames.size(); i++){
         if(getLastName(methodNames.get(i)).equals(curMethod.name)){
            methodNames.set(i, className + " " + curMethod.name);
            return 1;
         }
      }
      return -1;
   }

   void addMethods(ArrayList<String> methodNames, String className){

      if(map.get(className).parent!="~"){
         addMethods(methodNames, map.get(className).parent);
      }
      for(int i=0; i<map.get(className).MethodList.size(); i++){
         if(replaceMethodName(methodNames, className, map.get(className).MethodList.get(i))==-1){
            methodNames.add(className + " " + map.get(className).MethodList.get(i).name);
         }  
      }
   }

   void addFields(ArrayList<String> fieldNames, String className){
      
      if(map.get(className).parent!="~"){
         addFields(fieldNames, map.get(className).parent);
      }
      for(int i=0; i<map.get(className).FieldsList.size(); i++){
            fieldNames.add(className + " " + map.get(className).FieldsList.get(i).name);
      }
   }

   void StoreStruct(String name){
      ProcStruct newStruct = new ProcStruct();
      // newStruct.vtable = new Table();
      newStruct.methods = new ArrayList<String>();
      newStruct.fields = new ArrayList<String>();
      
      addMethods(newStruct.methods, name);
      addFields(newStruct.fields, name);
      classStruct.put(name,newStruct);
   }

   void StoreAllProcStructs(){
      for (Map.Entry<String, Class> entry : map.entrySet()) {
         String key = entry.getKey();
         Class value = entry.getValue();
         StoreStruct(key);
      }
   }

   public Method getMethod(String className, String methodName)
   {  
      for(int i=0; i < map.get(className).MethodList.size(); i++)
      {
         if(methodName.equals(map.get(className).MethodList.get(i).name))
         {
            return map.get(className).MethodList.get(i);
         }
      }

      if(!(map.get(className).parent.equals("~")))
      {
         return getMethod(map.get(className).parent, methodName);
      }

      Method nullMethod = new Method();
      nullMethod.name="~";
      return nullMethod;
   }

   public Var getVarInMethod(String className, String methodName, String varName)
   {
      Method curMethod = getMethod(className, methodName);

      for(int i=0; i < curMethod.variables.size(); i++){
         if(varName.equals(curMethod.variables.get(i).name)){
            return curMethod.variables.get(i);
         }
      }

      for(int i=0; i < curMethod.arguments.size(); i++){
         if(varName.equals(curMethod.arguments.get(i).name)){
            return curMethod.arguments.get(i);
         }
      }
      Var nullVar = new Var("~","~");
      nullVar.name="~";
      return nullVar;
   }

   public Var getVarInClass(String className, String varName)
   {
      for(int i=0; i < map.get(className).FieldsList.size(); i++)
      {
         if(varName.equals(map.get(className).FieldsList.get(i).name))
         {
            return map.get(className).FieldsList.get(i);
         }
      }

      // if(!(map.get(className).parent.equals("~")))
      // {
      //    return getVarInClass(map.get(className).parent, varName);
      // }

      Var nullVar = new Var("~","~");
      nullVar.name="~";
      return nullVar;
   }

   public void printData(){

      System.out.println("Hi");

      for (Map.Entry<String, Class> entry : map.entrySet()) {
            String key = entry.getKey();
            Class value = entry.getValue();

            System.out.println("Key: " + key);
            System.out.println("Value (Class name): " + value.name);
            System.out.println("Value (Parent class): " + value.parent);

            // Iterate through MethodList
            System.out.println("Methods:");
            for (Method method : value.MethodList) {
                System.out.println("  Method Name: " + method.name);
                System.out.println("  Arguments:");
                for (Var argument : method.arguments) {
                    System.out.println("    Argument Name: " + argument.name);
                    System.out.println("    Argument Type: " + argument.type);
                }
                System.out.println("  Variables:");
                for (Var variable : method.variables) {
                    System.out.println("    Variable Name: " + variable.name);
                    System.out.println("    Variable Type: " + variable.type);
                }
                System.out.println("  Return Type: " + method.returnType);
            }

            // Iterate through FieldsList
            System.out.println("Fields:");
            for (Var field : value.FieldsList) {
                System.out.println("  Field Name: " + field.name);
                System.out.println("  Field Type: " + field.type);
            }
        }
   }

   void printAllProcStructs(){
      for (Map.Entry<String, ProcStruct> entry : classStruct.entrySet()) {
         String className = entry.getKey();
         ProcStruct procStruct = entry.getValue();

         System.out.println("Class: " + className);
         System.out.println("Fields: " + procStruct.fields);
         System.out.println("Methods: " + procStruct.methods);
         System.out.println();
     }
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null; 
      map = (Map<String,Class>)argu;
      argu=(A)"";
      // printData();
      StoreAllProcStructs();
      // printAllProcStructs();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("MAIN");
      currentClass = (String)(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      currentMethod = n.f6.toString();
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      TMPcnt=1;
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      inMethod = false;
      currentClass = (String)(n.f1.accept(this, argu));
      inMethod = true;
      inClass = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      inClass = false;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      inMethod = false;
      currentClass = (String)(n.f1.accept(this, argu));
      inClass = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      inMethod = true;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      inClass = false;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      inMethod = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      inMethod = true;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      inMethod = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      currentMethod = (String)(n.f2.accept(this, argu));
      Method curMethod = getMethod(currentClass, currentMethod);
      System.out.println(currentClass + "_" + currentMethod + " [" + (1+curMethod.arguments.size()) + "]");
      TMPcnt = 1;
      varMap.clear();
      typeMap.clear();
      nameMap.clear();
      for(int i=0; i<curMethod.arguments.size(); i++){
         int newTMP = TMPcnt++;
         varMap.put(curMethod.arguments.get(i).name, newTMP);
         typeMap.put(newTMP, (getVarInMethod(currentClass, currentMethod ,curMethod.arguments.get(i).name)).type);
         nameMap.put(newTMP, curMethod.arguments.get(i).name);
      }
      // TMPcnt = 1 + curMethod.arguments.size();
      
      inMethod = true;
      System.out.println("BEGIN");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      int retTMP = (int)n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("RETURN TEMP " + retTMP);
      inMethod = false;
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu); 
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      inMethod = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      inMethod = true;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String varName = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer expTMP = (Integer)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Method curMethod = getMethod(currentClass, currentMethod);
      Var curVar = getVarInMethod(currentClass, currentMethod, varName);
      if(curVar.name.equals("~")){
         ProcStruct curStruct = classStruct.get(currentClass);
         boolean found = false;
         for(int i=curStruct.fields.size()-1; i>=0; i--){
            if(getLastName(curStruct.fields.get(i)).equals(varName)){
               System.out.println("HSTORE TEMP 0 " + 4*(i+1) + " TEMP " + expTMP);
               found = true;
               break;
            }
         }
         if(!found){
            while(true){}
         }
         return _ret;
      }
      else{
         if(varMap.get(varName)==null){
            int newVarTMP = TMPcnt++;
            varMap.put(varName, newVarTMP);
            typeMap.put(newVarTMP, (getVarInMethod(currentClass, currentMethod ,varName)).type);
            nameMap.put(newVarTMP, varName);
         }
         // System.out.println("Here");
         System.out.println("MOVE TEMP " + varMap.get(varName) + " TEMP " + expTMP);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String varName = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer idxTMP = (Integer)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      Integer valTMP = (Integer)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      Method curMethod = getMethod(currentClass, currentMethod);
      Var curVar = getVarInMethod(currentClass, currentMethod, varName);
      int arrTMP = TMPcnt++;
      if(curVar.name.equals("~")){
         boolean found = false;
         ProcStruct curStruct = classStruct.get(currentClass);
         for(int i=(curStruct.fields.size()-1); i>=0; i--){
            if(getLastName(curStruct.fields.get(i)).equals(varName)){
               System.out.println("HLOAD TEMP " + arrTMP + "TEMP 0 " + 4*(i+1));
               found = true;
               break;
            }
         }
         if(!found){
            while(true){}
         }
      }
      else{
         if(varMap.get(varName)==null){
            int newVarTMP = TMPcnt++;
            varMap.put(varName, newVarTMP);
            typeMap.put(newVarTMP, (getVarInMethod(currentClass, currentMethod ,varName)).type);
            nameMap.put(newVarTMP, varName);
         }
         System.out.println("MOVE TEMP " + arrTMP + " TEMP " + varMap.get(varName));
      }

      int fourTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + fourTMP + " 4");
      int alloc1TMP = TMPcnt++;
      int alloc2TMP = TMPcnt++;
      System.out.println("MOVE TEMP " + alloc1TMP + " TIMES TEMP " + idxTMP + " TEMP " + fourTMP);
      System.out.println("MOVE TEMP " + alloc2TMP + " PLUS TEMP " + alloc1TMP + " TEMP " + fourTMP);

      int locTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + locTMP + " PLUS TEMP " + arrTMP + " TEMP " + alloc2TMP);
      // System.out.println("HLOAD TEMP " + valTMP + " TEMP " + locTMP + " 0");

      System.out.println("HSTORE TEMP " + locTMP + " 0 TEMP " + valTMP);
      

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer boolTMP = (Integer)n.f2.accept(this, argu);
      int ifLBL = LBLcnt++;
      System.out.println("CJUMP TEMP " + boolTMP + " L" + ifLBL);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("L" + ifLBL);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer boolTMP = (Integer)n.f2.accept(this, argu);
      int ifLBL = LBLcnt++;
      int lastLBL = LBLcnt++;
      System.out.println("CJUMP TEMP " + boolTMP + " L" + ifLBL);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L" + lastLBL);
      n.f5.accept(this, argu);
      System.out.println("L" + ifLBL);
      System.out.println("NOOP");
      n.f6.accept(this, argu);
      System.out.println("L" + lastLBL);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      int whileLBL = LBLcnt++;
      int endLBL = LBLcnt++;
      
      System.out.println("L" + whileLBL);
      System.out.println("NOOP");
      Integer boolTMP = (Integer)(n.f2.accept(this, argu));
      System.out.println("CJUMP TEMP " + boolTMP + " L" + endLBL);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L" + whileLBL);
      System.out.println("L" + endLBL);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      int doLBL = LBLcnt++;
      int lastLBL = LBLcnt++;
      n.f0.accept(this, argu);
      System.out.println("L" + doLBL);
      System.out.println("NOOP");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Integer boolTMP = (Integer)(n.f4.accept(this, argu));
      System.out.println("CJUMP TEMP " + boolTMP + " L" + lastLBL);
      System.out.println("JUMP L" + doLBL);
      System.out.println("L" + lastLBL);
      System.out.println("NOOP");
      n.f5.accept(this, argu); 
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer printTMP = (Integer)n.f2.accept(this, argu);
      System.out.println("PRINT TEMP " + printTMP);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      // System.out.println("Hey" + firstTMP);
      n.f1.accept(this, argu);
      
      int andTMP = TMPcnt++;
      int ifLBL = LBLcnt++;
      int lastLBL = LBLcnt++;
      System.out.println("CJUMP TEMP " + firstTMP + " L" + ifLBL);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP " + secondTMP + " L" + ifLBL);
      System.out.println("MOVE TEMP " + andTMP + " 1");
      System.out.println("JUMP L" + lastLBL);

      System.out.println("L" + ifLBL);
      System.out.println("NOOP");
      System.out.println("MOVE TEMP " + andTMP + " 0");

      System.out.println("L" + lastLBL);
      System.out.println("NOOP");

      return (R)(Integer.valueOf(andTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      int orTMP = TMPcnt++;
      int if1LBL = LBLcnt++;
      int if2LBL = LBLcnt++;
      int lastLBL = LBLcnt++;
      System.out.println("CJUMP TEMP " + firstTMP + " L" + if1LBL);
      System.out.println("MOVE TEMP " + orTMP + " 1");
      System.out.println("JUMP L" + lastLBL);

      System.out.println("L" + if1LBL);
      System.out.println("NOOP");
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP " + secondTMP + " L" + if2LBL);
      System.out.println("MOVE TEMP " + orTMP + " 1");
      System.out.println("JUMP L" + lastLBL);

      System.out.println("L" + if2LBL);
      System.out.println("NOOP");
      System.out.println("MOVE TEMP " + orTMP + " 0");

      System.out.println("L" + lastLBL);
      System.out.println("NOOP");

      return (R)(Integer.valueOf(orTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      int leTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + leTMP + " LE TEMP " + firstTMP + " TEMP " + secondTMP);
      return (R)(Integer.valueOf(leTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      int neTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + neTMP + " NE TEMP " + firstTMP + " TEMP " + secondTMP);
      return (R)(Integer.valueOf(neTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      int plusTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + plusTMP + " PLUS TEMP " + firstTMP + " TEMP " + secondTMP);
      return (R)(Integer.valueOf(plusTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      int minusTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + minusTMP + " MINUS TEMP " + firstTMP + " TEMP " + secondTMP);
      return (R)(Integer.valueOf(minusTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      int timesTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + timesTMP + " TIMES TEMP " + firstTMP + " TEMP " + secondTMP);
      return (R)(Integer.valueOf(timesTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      // R _ret=null;
      Integer firstTMP = (Integer)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer secondTMP = (Integer)n.f2.accept(this, argu);
      int divTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + divTMP + " DIV TEMP " + firstTMP + " TEMP " + secondTMP);
      return (R)(Integer.valueOf(divTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      // R _ret=null;
      Integer arrTMP = (Integer)(n.f0.accept(this, argu));
      int valTMP = TMPcnt++;
      n.f1.accept(this, argu);
      Integer indexTMP = (Integer)(n.f2.accept(this, argu));
      int fourTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + fourTMP + " 4");
      int alloc1TMP = TMPcnt++;
      int alloc2TMP = TMPcnt++;
      System.out.println("MOVE TEMP " + alloc1TMP + " TIMES TEMP " + indexTMP + " TEMP " + fourTMP);
      System.out.println("MOVE TEMP " + alloc2TMP + " PLUS TEMP " + alloc1TMP + " TEMP " + fourTMP);

      int locTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + locTMP + " PLUS TEMP " + arrTMP + " TEMP " + alloc2TMP);
      System.out.println("HLOAD TEMP " + valTMP + " TEMP " + locTMP + " 0");
      n.f3.accept(this, argu);
      return (R)(Integer.valueOf(valTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      Integer arrTMP = (Integer)(n.f0.accept(this, argu));
      int valTMP = TMPcnt++;
      System.out.println("HLOAD TEMP " + valTMP + " TEMP " + arrTMP + " 0");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)(Integer.valueOf(valTMP));
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      
      Integer objStruct = (Integer)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String methodName = (String)(n.f2.accept(this, argu));
      String className="Initialise nahi hua";
      ProcStruct tempStruct = classStruct.get(currentClass);
      String retType = "Initialise nahi hua";
      String idName = "KAT GAYA";
      
      if(nameMap.get(objStruct)!=null){
         idName = nameMap.get(objStruct);
      }

      // System.out.println(idName);
      

      if(typeMap.get(objStruct)!=null){
         className = typeMap.get(objStruct);
      }
      else{
         boolean found = false;
         for(int i=tempStruct.fields.size()-1; i>=0; i--){
            if(getLastName(tempStruct.fields.get(i)).equals(idName)){
               String tempClass = getFirstName(tempStruct.fields.get(i));
               Var findVarinTemp = getVarInClass(tempClass, idName);
               className = findVarinTemp.type;
               found = true;
               break;
            }
         }
         if(!found){
            while(true){}
         }
      }

      // System.out.println("//" + className);
      ProcStruct curStruct = classStruct.get(className);

      int vtableTMP = TMPcnt++;
      int funcTMP = TMPcnt++;
      
      boolean found = false;
      // for(int i=0; i<curStruct.methods.size(); i++){
      for(int i=curStruct.methods.size()-1; i>=0; i--){
         if(getLastName(curStruct.methods.get(i)).equals(methodName)){
            System.out.println("HLOAD TEMP " + vtableTMP + " TEMP " + objStruct + " 0");
            System.out.println("HLOAD TEMP " + funcTMP + " TEMP " + vtableTMP + " " + (4*i));
            retType = getMethod(getFirstName(curStruct.methods.get(i)), getLastName(curStruct.methods.get(i))).returnType;
            found = true;
            break;
         }
         
      }
      if(found == false){
         while(true){   
         }
      }
      

      n.f3.accept(this, argu);

      ArrayList<Integer> temp = new ArrayList<Integer>();
      for(int i=0; i<curExpList.size(); i++){
         temp.add(curExpList.get(i));
      }
      curExpList.clear();
      
      n.f4.accept(this, argu);
      int retTMP = TMPcnt++;
      System.out.print("MOVE TEMP " + retTMP + " CALL TEMP " + funcTMP + " ( TEMP " + objStruct + " ");
      for(int i=0; i<curExpList.size(); i++){
         System.out.print("TEMP " + curExpList.get(i) + " ");
      }
      System.out.println(")");

      curExpList.clear();
      for(int i=0; i<temp.size(); i++){
         curExpList.add(temp.get(i));
      }

      n.f5.accept(this, argu);
      typeMap.put(retTMP, retType);
      return (R)(Integer.valueOf(retTMP));
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      curExpList.add((Integer)(n.f0.accept(this, argu)));
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      curExpList.add((Integer)(n.f1.accept(this, argu)));
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      // R _ret=null;
      if(n.f0.which==3){ 
         String varName = (String)n.f0.accept(this, argu);
         // System.out.println(varName);
         Method curMethod = getMethod(currentClass, currentMethod);
         Var curVar = getVarInMethod(currentClass, currentMethod, varName);
         // returnClasses.push(curVar.type );
         
         if(curVar.name.equals("~")){
            ProcStruct curStruct = classStruct.get(currentClass);
            
            int newVarTMP=-1;
            boolean found = false;
            for(int i=curStruct.fields.size()-1; i>=0; i--){
               // System.out.println(curStruct.fields);
               // System.out.println(getLastName(curStruct.fields.get(i)));
               if((getLastName(curStruct.fields.get(i))).equals(varName)){
                  // System.out.println("Here");
                  newVarTMP = TMPcnt++;
                  System.out.println("HLOAD TEMP " + newVarTMP + " TEMP 0 " + 4*(i+1));
                  nameMap.put(newVarTMP, varName);
                  found = true;
                  break;
               }
            }
            if(!found){
               while(true){}
            }
            return (R)(Integer.valueOf(newVarTMP));
         }
         else{
            if(varMap.get(varName)==null){
               int newVarTMP = TMPcnt++;
               varMap.put(varName, newVarTMP);
               nameMap.put(newVarTMP, varName);
               typeMap.put(newVarTMP, (getVarInMethod(currentClass, currentMethod , varName)).type);
            }
            // System.out.println("Type of this temp is " + typeMap.get(varMap.get(varName)));
            return (R)(Integer.valueOf(varMap.get(varName)));
         }
      }
      
      Integer primTMP = (Integer)(n.f0.accept(this, argu));
      return (R)(primTMP);
       
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      // R _ret=null;
      n.f0.accept(this, argu);
      String intName = (n.f0.tokenImage);
      int intTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + intTMP + " " + intName);
      return (R)(Integer.valueOf(intTMP));
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      // R _ret=null;
      n.f0.accept(this, argu);
      int trueTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + trueTMP + " 1");
      return (R)(Integer.valueOf(trueTMP));
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      // R _ret=null;
      n.f0.accept(this, argu);
      int falseTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + falseTMP + " 0");
      return (R)(Integer.valueOf(falseTMP));
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      
      n.f0.accept(this, argu);
      String varName = n.f0.tokenImage;
      
      return (R)(varName);
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      returnClasses.push(currentClass);
      typeMap.put(0,currentClass);
      return (R)(Integer.valueOf(0));
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      // R _ret=null;
      // System.out.println("Here");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Integer sizTMP = (Integer)(n.f3.accept(this, argu));
      int fourTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + fourTMP + " 4");
      int alloc1TMP = TMPcnt++;
      int alloc2TMP = TMPcnt++;
      int arrTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + alloc1TMP + " TIMES TEMP " + sizTMP + " TEMP " + fourTMP);
      System.out.println("MOVE TEMP " + alloc2TMP + " PLUS TEMP " + alloc1TMP + " TEMP " + fourTMP);
      System.out.println("MOVE TEMP " + arrTMP + " HALLOCATE TEMP " + alloc2TMP);
      System.out.println("HSTORE TEMP " + arrTMP + " 0 TEMP " + sizTMP);

      int whileLBL = LBLcnt++;
      int endLBL = LBLcnt++;
      int cntrTMP = TMPcnt++;
      int boolTMP = TMPcnt++;
      int zeroTMP = TMPcnt++;
      int bruhTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + zeroTMP + " 0");
      System.out.println("MOVE TEMP " + cntrTMP + " TEMP " + arrTMP);
      System.out.println("MOVE TEMP " + cntrTMP + " PLUS TEMP " + arrTMP + " TEMP " +  fourTMP);
      System.out.println("MOVE TEMP " + bruhTMP + " 4");

      System.out.println("L" + whileLBL);
      System.out.println("NOOP");
      System.out.println("MOVE TEMP " + boolTMP + " LE TEMP " + bruhTMP + " TEMP " + alloc2TMP);
      System.out.println("CJUMP TEMP " + boolTMP + " L" + endLBL);

      System.out.println("HSTORE TEMP " + cntrTMP + " 0 TEMP " + zeroTMP);
      System.out.println("MOVE TEMP " + cntrTMP + " PLUS TEMP " + cntrTMP + " TEMP " + fourTMP);
      System.out.println("MOVE TEMP " + bruhTMP + " PLUS TEMP " + bruhTMP + " TEMP " + fourTMP);

      System.out.println("JUMP L" + whileLBL);
      System.out.println("L" + endLBL);
      System.out.println("NOOP");

      n.f4.accept(this, argu);
      return (R)(Integer.valueOf(arrTMP));
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      inMethod=false;
      String className = (String)(n.f1.accept(this, argu));
      // System.out.println(className);
      returnClasses.push(className);
      
      inMethod=true;
      ProcStruct curStruct = classStruct.get(className);
      
      int vtSizeTMP = TMPcnt++;
      int vtableTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + vtSizeTMP + " " + (4*(curStruct.methods.size())));
      System.out.println("MOVE TEMP " + vtableTMP + " HALLOCATE TEMP " + vtSizeTMP);

      int objStructSizeTMP = TMPcnt++;
      int objStructTMP = TMPcnt++;
      System.out.println("MOVE TEMP " +  objStructSizeTMP + " " + (4*(1+curStruct.fields.size())));
      System.out.println("MOVE TEMP " + objStructTMP + " HALLOCATE TEMP " + objStructSizeTMP);

      for(int i=0; i<curStruct.methods.size(); i++){
         int methodNameTMP = TMPcnt++;
         System.out.println("MOVE TEMP " + methodNameTMP  + " " + getFirstName(curStruct.methods.get(i)) + "_" + getLastName(curStruct.methods.get(i)));
         System.out.println("HSTORE TEMP " + vtableTMP + " " + 4*i + " TEMP " + methodNameTMP);
      }

      System.out.println("HSTORE TEMP " + objStructTMP + " " + 0 + " TEMP " + vtableTMP);
      // System.out.println(curStruct.fields);
      // for(int i=1; i<=curStruct.fields.size(); i++){
      //    int fieldNameTMP = TMPcnt++;
      //    System.out.println("MOVE TEMP " +  fieldNameTMP + " " + getFirstName(curStruct.fields.get(i)) + "_" + getLastName(curStruct.fields.get(i)));
      //    System.out.println("HSTORE TEMP " + objStructTMP + " " + i + " TEMP " + fieldNameTMP);
      // } 
      
      int zeroTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + zeroTMP + " 0");
      for(int i=1; i<=curStruct.fields.size(); i++){
         System.out.println("HSTORE TEMP " + objStructTMP + " " + 4*i + " TEMP " + zeroTMP);
      }

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      typeMap.put(objStructTMP, className);
      return (R)(Integer.valueOf(objStructTMP));
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      // R _ret=null;
      n.f0.accept(this, argu);
      Integer notTMP = (Integer)(n.f1.accept(this, argu));
      int oneTMP = TMPcnt++;
      int resTMP = TMPcnt++;
      System.out.println("MOVE TEMP " + oneTMP + " 1");
      System.out.println("MOVE TEMP " + resTMP+ " MINUS TEMP " + oneTMP + " TEMP " + notTMP);
      
      return (R)(Integer.valueOf(resTMP));
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      n.f0.accept(this, argu);
      R _ret = (R)(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
