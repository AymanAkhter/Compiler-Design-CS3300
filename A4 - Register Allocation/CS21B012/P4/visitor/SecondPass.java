//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class SecondPass<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Map<String,Method> methodMap;
   String currentMethodName;
   ArrayList<String> callArgs = new ArrayList<String>();
   public int lineNumber = 0;
   public boolean inStmt = false;
   public boolean procedureLbl = false;
   public boolean inCallArgs = false;
   boolean lblFlag = false;

   public boolean checkSpilled(String tempName){
      // if(methodMap.get(currentMethodName).register.get(tempName)==null){
      //    System.out.println("..........ERROR..........");
      // }
      if(methodMap.get(currentMethodName).register.get(tempName).charAt(0)=='S')
         return true;
      return false;
   }

   public boolean checkInLiveRange(String tempName){
      Method curMethod = methodMap.get(currentMethodName);


      int startLive, endLive;
      if(curMethod.liveStart.get(tempName) != null){
         startLive = curMethod.liveStart.get(tempName);
      }
      else{
         return false;
      }
      if(curMethod.liveEnd.get(tempName) != null){
         endLive = curMethod.liveEnd.get(tempName);
      }
      else{
         return false;
      }

      if(lineNumber > endLive || lineNumber < startLive){
         return false;
      }
      return true;

   }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      methodMap = (Map<String,Method>)(argu);
      n.f0.accept(this, argu);
      currentMethodName = "MAIN";

      int maxCallArgs = methodMap.get(currentMethodName).maxCallArgs;
      int totalSpilled;
      if(currentMethodName.equals("MAIN")){
         totalSpilled = 0;
      } 
      else{
         totalSpilled = 8;
      }

      if(maxCallArgs!=-1){
         totalSpilled+=10;
      }
      if(methodMap.get(currentMethodName).totalSpilledInAlloc != 0){
         totalSpilled = 18;
         totalSpilled += methodMap.get(currentMethodName).totalSpilledInAlloc;
      }
      
      int thirdArg = maxCallArgs;
      if(maxCallArgs == -1)
         thirdArg = 0;
      System.out.println(currentMethodName + " [" + 0 + "] [" + totalSpilled + "] [" + thirdArg + "]");

      n.f1.accept(this, argu);
      lineNumber++;
      n.f2.accept(this, argu);
      System.out.println("END");
      if(methodMap.get(currentMethodName).totalSpilledInAlloc > 0){
         System.out.println("// SPILLED\n");
      }
      else{
         System.out.println("// NOTSPILLED\n");
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      procedureLbl = true;
      lblFlag = true;
      currentMethodName = (String)(n.f0.accept(this, argu));
      lblFlag = false;
      procedureLbl = false;

      n.f1.accept(this, argu);
      String intName = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);

      int maxCallArgs = methodMap.get(currentMethodName).maxCallArgs;
      int totalSpilled;
      if(currentMethodName.equals("MAIN")){
         totalSpilled = 0;
         if(maxCallArgs!=-1){
            totalSpilled+=10;
         }
      } 
      else{
         totalSpilled = 18;
      }

      if(methodMap.get(currentMethodName).totalSpilledInAlloc != 0){
         totalSpilled = 18;
         totalSpilled += methodMap.get(currentMethodName).totalSpilledInAlloc;
      }
      if(methodMap.get(currentMethodName).args >= 4){
         totalSpilled += methodMap.get(currentMethodName).args - 4;
      }

      int thirdArg = maxCallArgs;
      if(maxCallArgs == -1)
         thirdArg = 0;
      System.out.println(currentMethodName + " [" + intName + "] [" + totalSpilled + "] [" + thirdArg + "]");

      n.f4.accept(this, argu);
      lineNumber++;
      if(methodMap.get(currentMethodName).totalSpilledInAlloc > 0){
         System.out.println("// SPILLED\n");
      }
      else{
         System.out.println("// NOTSPILLED\n");
      }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      lineNumber++;
      inStmt = true;
      n.f0.accept(this, argu);
      inStmt = false;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String firstTemp = (String)(n.f1.accept(this, argu));
      String labelName = (String)(n.f2.accept(this, argu));
      String firstTempReg = methodMap.get(currentMethodName).register.get(firstTemp);
      String op1 = firstTempReg;
      if(checkSpilled(firstTemp)){
         System.out.println("ALOAD v0 " + firstTempReg);
         op1 = "v0";
      }

      System.out.println("CJUMP " + op1 + " " + labelName);

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String labelName = (String)(n.f1.accept(this, argu));
      System.out.println("JUMP " + labelName);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String firstTemp = (String)(n.f1.accept(this, argu));
      String intName = (String)(n.f2.accept(this, argu));
      String secondTemp = (String)(n.f3.accept(this, argu));

      String firstTempReg = methodMap.get(currentMethodName).register.get(firstTemp);
      String op1 = firstTempReg;

      String secondTempReg = methodMap.get(currentMethodName).register.get(secondTemp);
      String op2 = secondTempReg;


      if(checkSpilled(firstTemp)){
         System.out.println("ALOAD v0 " + firstTempReg);
         op1 = "v0";
      }

      if(checkSpilled(secondTemp)){
         System.out.println("ALOAD v1 " + secondTempReg);
         op2 = "v1";
      }

      System.out.println("HSTORE " + op1 + " " + intName + " " + op2);
      

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String firstTemp = (String)(n.f1.accept(this, argu));
      String secondTemp = (String)(n.f2.accept(this, argu));
      String intName = (String)(n.f3.accept(this, argu));

      String firstTempReg = methodMap.get(currentMethodName).register.get(firstTemp);

      String secondTempReg = methodMap.get(currentMethodName).register.get(secondTemp);
      String op2 = secondTempReg;
      if(checkSpilled(secondTemp)){
         System.out.println("ALOAD v0 " + secondTempReg);
         op2 = "v0";
      }

      if(!checkInLiveRange(firstTemp)){
         System.out.println("NOOP");
      }
      else{
         if(checkSpilled(firstTemp)){
            System.out.println("HLOAD v1 " + op2 + " " + intName);
            System.out.println("ASTORE " + firstTempReg + " v1");
         }
         else{
            System.out.println("HLOAD " + firstTempReg + " " + op2 + " " + intName);
         }
      }
      
      
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tempName = (String)(n.f1.accept(this, argu));
      String tempReg = methodMap.get(currentMethodName).register.get(tempName);
      n.f2.accept(this, argu);
      if(!checkInLiveRange(tempName)){
         System.out.println("NOOP");
      }
      else{
         if(checkSpilled(tempName)){
            System.out.println("ASTORE " + tempReg + " v0");
         }
         else{
            System.out.println("MOVE " + tempReg + " v0");
         }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String printName = (String)(n.f0.accept(this, argu));
      String op = (String)(n.f1.accept(this, argu));
      if(n.f1.f0.which==0)
      {
         String temp = op;
         String tempReg = methodMap.get(currentMethodName).register.get(temp);
         op = tempReg;
         if(checkSpilled(temp)){
            System.out.println("ALOAD v0 " + tempReg);
            op = "v0";
         }
      }
      System.out.println("PRINT " + op);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String op = (String)(n.f0.accept(this, argu));
      if(n.f0.choice instanceof SimpleExp)
      {
         if(((SimpleExp)n.f0.choice).f0.choice instanceof Temp){
            String temp = op;
            String tempReg = methodMap.get(currentMethodName).register.get(temp);
            op = tempReg;
            if(checkSpilled(temp)){
               System.out.println("ALOAD v0 " + tempReg);
               op = "v0";
            }
         }
         System.out.println("MOVE v0 " + op);
      }
      
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      int startStore = methodMap.get(currentMethodName).args;
      if(startStore>3){
         startStore-=4;
      }
      else{
         startStore=0;
      }
      startStore+=10;
      for(int i=0; i<8; i++){
         System.out.println("ASTORE SPILLEDARG " + (i+startStore) + " s" + i);
      }
      n.f0.accept(this, argu);

      int restArgs = methodMap.get(currentMethodName).args;
      for(int i=0; i<restArgs; i++){
         String temp = Integer.toString(i);
         String tempReg = methodMap.get(currentMethodName).register.get(temp);
         
         if(!checkInLiveRange(temp)){
            System.out.println("NOOP");
            continue;
         }
         if(i<=3){
            if(checkSpilled(temp)){
               System.out.println("ASTORE " + tempReg + " a" + i);
            } 
            else{
               System.out.println("MOVE " + tempReg + " a" +i);
            }
         }
         else{
            System.out.println("ALOAD v0 SPILLEDARG " + (i-4));
            if(checkSpilled(temp)){
               System.out.println("ASTORE " + tempReg + " v0");
            } 
            else{
               System.out.println("MOVE " + tempReg + " v0");
            }
         }
      }

      n.f1.accept(this, argu);
      lineNumber++;
      n.f2.accept(this, argu);
      String op = (String)(n.f3.accept(this, argu));
      if(n.f3.f0.which==0)
      {
         String temp = op;
         String tempReg = methodMap.get(currentMethodName).register.get(temp);
         op = tempReg;
         if(checkSpilled(temp)){
            System.out.println("ALOAD v0 " + tempReg);
            op = "v0";
         }
      }
      System.out.println("MOVE v0 " + op);
      n.f4.accept(this, argu);
      for(int i=0; i<8; i++){
         System.out.println("ALOAD s" + i + " SPILLEDARG " + (i+startStore));
      }
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      int startStore = methodMap.get(currentMethodName).args;
      if(startStore>3){
         startStore-=4;
      }
      else{
         startStore=0;
      }
      for(int i=0; i<10; i++){
         System.out.println("ASTORE SPILLEDARG " + (i+startStore) + " t" + i);
      }
      n.f0.accept(this, argu);

      String op = (String)(n.f1.accept(this, argu));
      if(n.f1.f0.which==0)
      {
         String temp = op;
         String tempReg = methodMap.get(currentMethodName).register.get(temp);
         op = tempReg;
         if(checkSpilled(temp)){
            System.out.println("ALOAD v1 " + tempReg);
            op = "v1";
         }
      }

      n.f2.accept(this, argu);
      inCallArgs = true;
      n.f3.accept(this, argu);
      inCallArgs = false;
      n.f4.accept(this, argu);

      
      for(int i=0; i<callArgs.size(); i++){
         String temp = callArgs.get(i);
         String tempReg = methodMap.get(currentMethodName).register.get(temp);
         String opIn = tempReg;
         if(checkSpilled(temp)){
            System.out.println("ALOAD v0 " + tempReg);
            opIn = "v0";
         }

         if(i<=3){
            System.out.println("MOVE a" + i + " " + opIn);
         }
         else{
            System.out.println("PASSARG " + (i-3) + " " + opIn);
         } 
      }
      System.out.println("CALL " + op);
      callArgs.clear();
      for(int i=0; i<10; i++){
         System.out.println("ALOAD t" + i + " SPILLEDARG " + (i+startStore));
      }


      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String op = (String)(n.f1.accept(this, argu));
      if(n.f1.f0.which==0)
      {
         String temp = op;
         String tempReg = methodMap.get(currentMethodName).register.get(temp);
         op = tempReg;
         if(checkSpilled(temp)){
            System.out.println("ALOAD v0 " + tempReg);
            op = "v0";
         }
      }

      System.out.println("MOVE v0 HALLOCATE " + op);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String opName = (String)(n.f0.accept(this, argu));
      String firstTemp = (String)(n.f1.accept(this, argu));
      String secondOp = (String)(n.f2.accept(this, argu));

      String firstTempReg = methodMap.get(currentMethodName).register.get(firstTemp);
      String op1 = firstTempReg;
      if(checkSpilled(firstTemp)){
         System.out.println("ALOAD v0 " + firstTempReg);
         op1 = "v0";
      }

      String op2 = secondOp;
      if(n.f2.f0.which==0)
      {
         String secondTemp = secondOp;
         String secondTempReg = methodMap.get(currentMethodName).register.get(secondTemp);
         op2 = secondTempReg;
         if(checkSpilled(secondTemp)){
            System.out.println("ALOAD v1 " + secondTempReg);
            op2 = "v1";
         }
      }

      System.out.println("MOVE v0 " + opName + " " + op1 + " " + op2);

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String opName = "KEK";
      if(n.f0.which==0){
         opName = "LE";
      }
      else if(n.f0.which==1){
         opName = "NE";
      }
      else if(n.f0.which==2){
         opName = "PLUS";
      }
      else if(n.f0.which==3){
         opName = "MINUS";
      }
      else if(n.f0.which==4){
         opName = "TIMES";
      }
      else if(n.f0.which==5){
         opName = "DIV";
      }
      return (R)(opName);
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      lblFlag = true;
      String name = (String)(n.f0.accept(this, argu));
      lblFlag = false;
      return (R)name;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tempName = (String)(n.f1.accept(this, argu));
      if(inCallArgs){
         callArgs.add(tempName);
      }
      return (R)tempName;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String intName = n.f0.tokenImage;
      return (R)intName;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String idName = n.f0.tokenImage;
      if(!lblFlag)
         idName = (idName + currentMethodName);
      if(!inStmt && !procedureLbl){
         System.out.println(idName);
      }
      if(!inStmt){
         lineNumber++;
      }
      return (R)idName;
   }

}
